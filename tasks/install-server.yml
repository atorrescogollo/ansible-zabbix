#
# Zabbix Server Installation
#

- name: 'Install deb from {{ zabbix_deb_url }}'
  apt:
    deb: "{{ zabbix_deb_url }}"
  tags:
    - install-server
    - install-server-install

- name: Install Zabbix Server packages
  apt:
    pkg:
      - zabbix-server-mysql
      - zabbix-frontend-php
      - zabbix-apache-conf
      - zabbix-agent
      - default-mysql-client
      - python3-mysqldb
    update_cache: yes
  tags:
    - install-server
    - install-server-install

- name: Include credentials file if exists
  include_vars: credentials.yml
  ignore_errors: yes
  tags:
    - always

- name: Create database
  mysql_db:
    name: "{{ dbname }}"
    encoding: utf8
    collation: utf8_bin
    state: present
  register: db_created
  tags:
    - install-server
    - install-server-install

- name: Create dbuser and grant privileges
  mysql_user:
    name: '{{ dbuser }}'
    host: localhost
    password: '{{ dbpass }}'
    priv: '{{ dbname }}.*:ALL,GRANT'
    state: present
  tags:
    - install-server
    - install-server-install

- name: Import database skeleton
  mysql_db:
    state: import
    name: '{{ dbname }}'
    target: '{{ dbdata_dumpfile }}'
  when: db_created.changed
  tags:
    - install-server
    - install-server-install

- name: Configure Zabbix Server
  lineinfile:
    dest: "{{ item.configfile }}"
    regexp: "^{{ item.param }}="
    insertafter: "^# {{ item.param }}=$"
    line: "{{ item.param }}={{ item.value }}"
  notify:
    - 'Restart {{ item.service }}'
  with_items:
    - {configfile: "/etc/zabbix/zabbix_server.conf", param: "DBName", value: "{{ dbname }}", service: 'zabbix-server'}
    - {configfile: "/etc/zabbix/zabbix_server.conf", param: "DBUser", value: "{{ dbuser }}", service: 'zabbix-server'}
    - {configfile: "/etc/zabbix/zabbix_server.conf", param: "DBPassword", value: "{{ dbpass }}", service: 'zabbix-server'}
    - {configfile: "/etc/zabbix/zabbix_agentd.conf", param: "Hostname", value: "{{ inventory_hostname }}", service: 'zabbix-agent'}
  tags:
    - install-server
    - install-server-configure

- name: Set php timezone
  replace:
    path: /etc/zabbix/apache.conf
    regexp: '(#\s*)?php_value date.timezone .*$'
    replace: 'php_value date.timezone {{ timezone }}'
  notify:
    - Restart apache2
  tags:
    - install-server
    - install-server-configure

- name: Enable Apache2 SSL
  shell: |
    /usr/sbin/a2enmod ssl
    /usr/sbin/a2ensite default-ssl
  register: cmdresult
  changed_when: cmdresult.stdout is search('Enabling module ssl.') or cmdresult.stdout is search('Enabling site default-ssl.')
  when: enablessl
  notify:
    - Restart apache2
  tags:
    - install-server
    - install-server-configure

- name: Enable HTTP to HTTPS | rewrite module
  shell: |
    /usr/sbin/a2enmod rewrite
  register: cmdresult
  changed_when: cmdresult.stdout is search('Enabling module rewrite.')
  notify:
    - Restart apache2
  when: enablessl
  tags:
    - install-server
    - install-server-configure

- name: Enable HTTP to HTTPS | rewrite condition
  blockinfile:
    dest: /etc/apache2/sites-enabled/000-default.conf
    insertafter: '<VirtualHost.*80>'
    block: |
          <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteCond %{HTTPS} off
            RewriteRule /(.*) https://%{SERVER_NAME}/$1 [R,L]
          </IfModule>
  when: enablessl
  notify:
    - Restart apache2
  tags:
    - install-server
    - install-server-configure

- name: Redirect / to /zabbix/
  lineinfile:
    dest: /etc/apache2/sites-enabled/default-ssl.conf
    regexp: 'RedirectMatch \^/\$ '
    insertafter: '<VirtualHost .*443>'
    line: RedirectMatch ^/$ /zabbix/
  when: redirectalias
  notify:
    - Restart apache2

- name: Configure Zabbix Frontend
  template:
    src: zabbix.conf.php.j2
    dest: /usr/share/zabbix/conf/zabbix.conf.php
  tags:
    - install-server
    - install-server-configure

- name: Reset Admin Password
  set_fact:
    useralias: Admin
    newpass: "{{ adminpass }}"
    apipass: zabbix
  when: adminpass is defined
  tags:
    - install-server
    - install-server-configure

- meta: flush_handlers

- include_tasks: 'change-user-passwd.yml'
  when: adminpass is defined
  tags:
    - install-server
    - install-server-configure

- name: Update Admin Credentials for API access
  set_fact:
    apiuser: Admin
    apipass: "{{ adminpass }}"
  when: adminpass is defined
  tags:
    - install-server
    - install-server-configure
